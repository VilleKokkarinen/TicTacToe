// This file was auto-generated by ML.NET Model Builder. 

using System;
using System.IO;
using System.Linq;
using Microsoft.ML;
using TicTacToeML.Model;

namespace TicTacToeML.ConsoleApp
{
    class Program
    {
        //Dataset to use for predictions 
        private const string DATA_FILEPATH = @"C:\Users\ville\Source\Repos\VilleKokkarinen\TicTacToe\TicTacToe\bin\x64\Debug\MoveData.csv";

        static void Main(string[] args)
        {
            // Create single instance of sample data from first line of dataset for model input
            ModelInput sampleData = CreateSingleDataSample(DATA_FILEPATH);

            // Make a single prediction on the sample data and print results
            ModelOutput predictionResult = ConsumeModel.Predict(sampleData);

            Console.WriteLine("Using model to make single prediction -- Comparing actual TileID with predicted TileID from sample data...\n\n");
            Console.WriteLine($"TilePlayed: {sampleData.TilePlayed}");
            Console.WriteLine($"tile1: {sampleData.Tile1}");
            Console.WriteLine($"tile2: {sampleData.Tile2}");
            Console.WriteLine($"tile3: {sampleData.Tile3}");
            Console.WriteLine($"tile4: {sampleData.Tile4}");
            Console.WriteLine($"tile5: {sampleData.Tile5}");
            Console.WriteLine($"tile6: {sampleData.Tile6}");
            Console.WriteLine($"tile7: {sampleData.Tile7}");
            Console.WriteLine($"tile8: {sampleData.Tile8}");
            Console.WriteLine($"tile9: {sampleData.Tile9}");
            Console.WriteLine($"\n\nActual TileID: {sampleData.TileID} \nPredicted TileID value {predictionResult.Prediction} \nPredicted TileID scores: [{String.Join(",", predictionResult.Score)}]\n\n");
            Console.WriteLine("=============== End of process, hit any key to finish ===============");
            Console.ReadKey();
        }

        // Change this code to create your own sample data
        #region CreateSingleDataSample
        // Method to load single row of dataset to try a single prediction
        private static ModelInput CreateSingleDataSample(string dataFilePath)
        {
            // Create MLContext
            MLContext mlContext = new MLContext();

            // Load dataset
            IDataView dataView = mlContext.Data.LoadFromTextFile<ModelInput>(
                                            path: dataFilePath,
                                            hasHeader: true,
                                            separatorChar: ',',
                                            allowQuoting: true,
                                            allowSparse: false);

            // Use first line of dataset as model input
            // You can replace this with new test data (hardcoded or from end-user application)
            ModelInput sampleForPrediction = mlContext.Data.CreateEnumerable<ModelInput>(dataView, false)
                                                                        .First();
            return sampleForPrediction;
        }
        #endregion
    }
}
